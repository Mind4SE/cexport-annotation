<?xml version="1.0" encoding="UTF-8"?>
<chapter id="componentInstance" 
version="5.0" 
xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  >
    <title>
        Exporting a component instance
    </title>
    <section>
    <title>Concept</title>
    <para>
  	This is the basic intended usage of the plugin.
  	The interfaces to be exported should all belong to the same component.
  	A <code>primitive</code>, if only one component is to be exported.
  	A <code>composite</code>, if one want to export an assembly of component.
  	
  	This component should be instantiated (alone) in a "containing component".
  	Its interface unbound, and the instance should hold the annotation <code>@CExport</code>.  
    </para>
    <para>
    For each interface of this component, a header file will be generated by the plugin, 
    containing the declaration of <code>C</code> methods corresponding to the interfaces methods.
    The <code>C</code> methods will be prefixed with interface instance name.  
    </para>
    <para>
    Included files from the interface definition are also included in the generated header files.
    However, for user defined header file, 
    it is the responsability of the developer to take care that the required include files are accessible for latter build.     
    </para>
    </section>
    <section>
    <title>Example</title>
    <para>
    Let's define a <code>composite</code> providing and requiring only the interfaces we would like to interact with in <code>C</code>.
    <programlisting linenumbering="unnumbered" language="adl">
<?db-font-size 75% ?>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="../assemble/resources/examples/ExportComponent/src/main/mind/mypackage/MyComposite.adl"  parse="text" />
    </programlisting>
    
    Here both the <code>srv</code> and the <code>clt</code> interfaces are of type <code>MyInterface</code>
     <programlisting linenumbering="unnumbered" language="idl">
<?db-font-size 75% ?>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="../assemble/resources/examples/ExportComponent/src/main/mind/mypackage/MyInterface.itf"  parse="text" />
    </programlisting>   
    
    We instantiate this component inside an empty composite.
    The instance should be annotated <code>@CExport</code>.
    the client interfaces should be left unbound. 
     <programlisting linenumbering="unnumbered" language="adl">
<?db-font-size 75% ?>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="../assemble/resources/examples/ExportComponent/src/main/mind/mypackage/ExportContainer.adl"  parse="text" />
    </programlisting>
    
    As stated in the introduction, we set the linker to <code>ld</code>,
    and the <code>-r</code> linker flag in the <code>Default.properties</code> file.
     <programlisting linenumbering="unnumbered" >
<?db-font-size 75% ?>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="../assemble/resources/examples/ExportComponent/Default.properties"  parse="text" />
    </programlisting>
    
    After building this <code>Default</code> build configuration, in the directory
    <code>target/Default/binaries/</code> among with other items we can find :
    <itemizedlist>
    <listitem><code>comp.o</code> which is the output of the compiler as specified in the <code>Default.properties</code> file.</listitem>
    <listitem><code>srv_export.h</code> which is the generated header corresponding to the interface named <code>srv</code></listitem>
    <listitem><code>clt_export.h</code> which is the generated header corresponding to the interface named <code>clt</code></listitem>
    <listitem><code>mindcommon.h</code> which is included in all exported interfaces.</listitem>
    </itemizedlist>
    
    Symbols defined in the <code>srv_export.h</code> header are already defined in the <code>comp.o</code> object.
    And can be used from any <code>C</code> source file which includes <code>srv_export.h</code>.
     <programlisting linenumbering="unnumbered" language="c">
<?db-font-size 75% ?>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="srv_export.h"  parse="text" />
    </programlisting> 
    
    Symbols defined in the <code>clt_export.h</code> header are used in the <code>comp.o</code> object but not yet defined.
    They should be defined by once and only once by some <code>C</code> source files before the final link.
     <programlisting linenumbering="unnumbered" language="c">
<?db-font-size 75% ?>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="clt_export.h"  parse="text" />
    </programlisting>    
    
    We can now create an application, using those generated files :
     <programlisting linenumbering="unnumbered" language="c">
<?db-font-size 75% ?>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="../assemble/resources/examples/ExportComponent/src/main/c/main.c"  parse="text" />
    </programlisting>    

	This application is then ready to be compiled, with an include path pointing to the generated elements directory :
    <programlisting linenumbering="unnumbered" language="c">
gcc -c $(cSourcePath)/main.c -I$(binOutputDir) -o $(binOutputDir)/main.o
	</programlisting>
	And linked with the mind generated binary :
	<programlisting linenumbering="unnumbered" language="c">
gcc $(binOutputDir)/main.c $(binOutputDir)/comp.o -o $(binOutputDir)/App.out
	</programlisting>
    
    </para>
    </section>   
</chapter>
